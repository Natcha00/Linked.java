
// import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.*;
import java.util.Queue;

class New_year extends JPanel {
    // Image image;

    New_year() {

        // image = new
        // ImageIcon("/Users/pinpin/Desktop/ปี2.2/CG/CG_project/dragon1.png").getImage();
        this.setPreferredSize(new Dimension(600, 600));
    }
    // New_year() {
    // image = new ImageIcon("dragon1.png").getImage();
    // this.setPreferredSize(new Dimension(600, 600));
    // }

    public static void main(String[] args) {
        New_year m = new New_year();
        JFrame f = new JFrame();
        f.add(m);
        f.setTitle("New year 2024");
        f.setSize(600, 600);
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        f.setVisible(true);
    }

    public void paintComponent(Graphics g) {
        // Graphics2D g2 = (Graphics2D) g;
        // g2.setColor(Color.BLUE);
        // BasicStroke bs = new BasicStroke(10);

        BufferedImage buffer = new BufferedImage(601, 601, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2 = buffer.createGraphics();
        g2.setColor(Color.WHITE);
        g2.fillRect(0, 0, 600, 600);
        g2.setColor(Color.black);

        // เมฆซ้าย
        benzierCurve(g2, 141, 338, 138, 370, 105, 370, 97, 353, 2);
        benzierCurve(g2, 70, 348, 80, 360, 85, 365, 97, 353, 2);
        benzierCurve(g2, 70, 348, 60, 360, 10, 350, 37, 315, 2);
        benzierCurve(g2, 33, 315, 20, 305, 20, 290, 42, 280, 2);
        benzierCurve(g2, 42, 280, 33, 258, 55, 240, 83, 260, 2);
        benzierCurve(g2, 89, 277, 70, 246, 135, 235, 120, 280, 2);
        benzierCurve(g2, 143, 298, 139, 280, 130, 275, 120, 280, 2);
        benzierCurve(g2, 143, 298, 150, 270, 195, 325, 155, 320, 2);
        benzierCurve(g2, 142, 344, 190, 305, 105, 290, 120, 327, 2);
        floodFill(buffer, 86, 308, Color.WHITE, new Color(186, 235, 252));

         // เมฆหาง
         benzierCurve(g2, 490, 50, 560, 97, 380, 70, 438, 50, 2);
         benzierCurve(g2, 438, 50, 425, 65, 385, 38, 420, 10, 2);
         benzierCurve(g2, 415, 0, 410, 2, 415, 5, 420, 10, 2);
         benzierCurve(g2, 533, 40, 540, 30, 560, 10, 507, 1, 2);
         benzierCurve(g2, 533, 40, 538, 70, 505, 75, 495, 50, 2);
         benzierCurve(g2, 415, 0, 538, 0, 505, 0, 507, 1, 2);
         floodFill(buffer, 435, 30, Color.WHITE, new Color(186, 235, 252));

        // body
        benzierCurve(g2, 180, 172, 150, 200, 150, 250, 175, 280, 2);
        g2.setColor(new Color(221, 93, 97));
        benzierCurve(g2, 185, 170, 227, 145, 265, 158, 292, 175, 2);
        g2.setColor(Color.black);
        benzierCurve(g2, 292, 175, 320, 185, 350, 225, 433, 200, 2);
        benzierCurve(g2, 430, 200, 490, 150, 485, 15, 550, 10, 2);
        benzierCurve(g2, 549, 10, 585, 8, 525, 95, 590, 100, 2);
        benzierCurve(g2, 350, 130, 387, 150, 418, 135, 455, 0, 2);
        benzierCurve(g2, 120, 320, 170, 370, 210, 380, 220, 380, 2);
        benzierCurve(g2, 115, 152, 105, 140, 72, 260, 120, 320, 2);
        benzierCurve(g2, 110, 153, 150, 60, 270, 60, 350, 130, 2);
        // g2.setColor(new Color(153, 0, 0));
        g2.setColor(Color.black);
        line(g2, 585, 0, 585, 100);
        line(g2, 455, 0, 585, 0);
        line(g2, 222, 380, 222, 325);
        // fin
        benzierCurve(g2, 142, 110, 115, 140, 98, 270, 224, 325, 2);
        Triangle(g2, 371, 138, 5, 10, 20);
        g2.setColor(Color.black);
        benzierCurve(g2, 218, 322, 213, 300, 210, 300, 207, 312, 2);
        benzierCurve(g2, 207, 312, 203, 295, 201, 290, 198, 305, 2);
        benzierCurve(g2, 198, 305, 200, 308, 195, 290, 190, 300, 2);
        benzierCurve(g2, 190, 300, 185, 295, 183, 290, 180, 292, 2);
        benzierCurve(g2, 180, 292, 175, 280, 170, 275, 165, 278, 2);
        benzierCurve(g2, 165, 278, 165, 275, 161, 270, 158, 269, 2);
        benzierCurve(g2, 158, 269, 155, 260, 153, 268, 150, 255, 2);
        benzierCurve(g2, 150, 255, 147, 240, 144, 247, 140, 240, 2);
        benzierCurve(g2, 140, 240, 137, 215, 135, 220, 133, 225, 2);
        benzierCurve(g2, 133, 225, 135, 210, 127, 208, 130, 200, 2);
        benzierCurve(g2, 130, 200, 132, 195, 133, 190, 129, 185, 2);
        benzierCurve(g2, 129, 185, 127, 175, 127, 170, 130, 165, 2);
        benzierCurve(g2, 130, 165, 132, 150, 133, 155, 130, 150, 2);
        benzierCurve(g2, 130, 150, 133, 147, 132, 144, 135, 140, 2);
        benzierCurve(g2, 135, 140, 133, 137, 133, 134, 135, 130, 2);
        benzierCurve(g2, 135, 130, 135, 127, 136, 124, 132, 120, 2);
        benzierCurve(g2, 135, 130, 135, 127, 136, 124, 137, 120, 2);
        benzierCurve(g2, 142, 110, 145, 100, 147, 95, 152, 95, 2);
        benzierCurve(g2, 152, 95, 155, 92, 157, 90, 162, 90, 2);
        benzierCurve(g2, 162, 90, 165, 80, 167, 90, 170, 85, 2);
        benzierCurve(g2, 170, 85, 175, 75, 177, 85, 180, 80, 2);
        benzierCurve(g2, 180, 80, 185, 80, 187, 70, 190, 78, 2);
        benzierCurve(g2, 190, 78, 195, 80, 197, 70, 200, 78, 2);
        benzierCurve(g2, 200, 78, 205, 80, 207, 70, 210, 75, 2);
        benzierCurve(g2, 210, 75, 213, 80, 217, 70, 220, 75, 2);
        benzierCurve(g2, 220, 75, 225, 80, 227, 70, 235, 75, 2);
        benzierCurve(g2, 230, 75, 235, 80, 240, 65, 245, 75, 2);
        benzierCurve(g2, 245, 75, 245, 75, 250, 65, 255, 75, 2);
        benzierCurve(g2, 255, 75, 257, 75, 258, 70, 260, 75, 2);
        benzierCurve(g2, 260, 75, 265, 80, 267, 70, 270, 80, 2);
        benzierCurve(g2, 270, 80, 275, 80, 284, 65, 288, 85, 2);
        benzierCurve(g2, 288, 85, 291, 87, 294, 80, 300, 90, 2);
        benzierCurve(g2, 300, 90, 303, 87, 305, 85, 310, 95, 2);
        benzierCurve(g2, 310, 95, 315, 90, 318, 85, 320, 100, 2);
        benzierCurve(g2, 320, 100, 325, 97, 328, 95, 330, 105, 2);
        benzierCurve(g2, 330, 105, 333, 104, 337, 103, 338, 113, 2);
        benzierCurve(g2, 338, 113, 343, 113, 347, 100, 348, 120, 2);
        benzierCurve(g2, 348, 120, 350, 115, 355, 113, 357, 127, 2);
        benzierCurve(g2, 357, 127, 363, 125, 365, 117, 373, 130, 2);
        benzierCurve(g2, 378, 127, 383, 119, 385, 120, 387, 125, 2);
        benzierCurve(g2, 387, 125, 390, 119, 393, 120, 395, 123, 2);
        benzierCurve(g2, 395, 123, 400, 105, 403, 107, 407, 108, 2);
        benzierCurve(g2, 407, 108, 410, 100, 413, 90, 418, 90, 2);
        benzierCurve(g2, 418, 90, 420, 80, 425, 60, 429, 65, 2);
        benzierCurve(g2, 429, 65, 431, 55, 433, 50, 435, 48, 2);
        benzierCurve(g2, 435, 48, 431, 45, 433, 40, 437, 38, 2);
        benzierCurve(g2, 437, 38, 435, 27, 438, 25, 442, 23, 2);
        benzierCurve(g2, 442, 23, 440, 17, 438, 14, 445, 10, 2);
        benzierCurve(g2, 445, 10, 442, 7, 443, 4, 445, 0, 2);
        Triangle(g2, 215, 322, 5, 10, 20);
        // leg
        g2.setColor(Color.black);
        benzierCurve(g2, 418, 204, 455, 217, 460, 190, 490, 170, 2);
        benzierCurve(g2, 490, 170, 510, 167, 510, 180, 525, 185, 2);
        benzierCurve(g2, 490, 140, 510, 155, 510, 159, 540, 175, 2);
        benzierCurve(g2, 467, 147, 470, 140, 480, 135, 490, 140, 2);
        // hand
        benzierCurve(g2, 245, 140, 375, 140, 250, 200, 257, 218, 2);
        benzierCurve(g2, 180, 175, 200, 200, 240, 180, 260, 175, 2);
        benzierCurve(g2, 260, 175, 250, 200, 240, 215, 230, 207, 2);
        // finger_hand
        benzierCurve(g2, 257, 218, 260, 225, 270, 210, 290, 213, 2);
        benzierCurve(g2, 290, 214, 295, 225, 294, 225, 290, 230, 2);
        line(g2, 290, 229, 260, 228);
        benzierCurve(g2, 260, 228, 254, 230, 255, 232, 259, 237, 2);
        benzierCurve(g2, 259, 237, 263, 245, 255, 240, 260, 250, 2);
        benzierCurve(g2, 259, 250, 263, 255, 265, 255, 260, 260, 2);
        benzierCurve(g2, 260, 260, 255, 265, 255, 265, 241, 260, 2);
        benzierCurve(g2, 241, 260, 243, 240, 247, 247, 242, 230, 2);
        benzierCurve(g2, 242, 228, 220, 235, 225, 247, 210, 245, 2);
        benzierCurve(g2, 210, 245, 195, 235, 195, 230, 210, 223, 2);
        line(g2, 210, 223, 230, 221);
        line(g2, 230, 220, 205, 218);
        benzierCurve(g2, 205, 218, 185, 205, 205, 187, 200, 192, 2);
        benzierCurve(g2, 230, 207, 225, 205, 205, 187, 200, 192, 2);
        // // finger_leg
        benzierCurve(g2, 525, 187, 530, 190, 520, 210, 500, 194, 2);
        benzierCurve(g2, 500, 194, 495, 192, 489, 210, 505, 220, 2);
        benzierCurve(g2, 505, 219, 510, 218, 520, 218, 535, 207, 2);
        benzierCurve(g2, 535, 207, 540, 220, 510, 230, 520, 243, 2);
        benzierCurve(g2, 520, 243, 530, 250, 530, 250, 535, 243, 2);
        benzierCurve(g2, 535, 243, 530, 250, 540, 250, 545, 212, 2);
        benzierCurve(g2, 545, 212, 548, 210, 550, 209, 555, 212, 2);
        benzierCurve(g2, 555, 212, 560, 220, 555, 225, 570, 230, 2);
        benzierCurve(g2, 570, 230, 580, 220, 582, 210, 570, 205, 2);
        benzierCurve(g2, 570, 205, 575, 205, 570, 210, 550, 190, 2);
        benzierCurve(g2, 550, 190, 555, 185, 570, 180, 570, 170, 2);
        benzierCurve(g2, 570, 170, 565, 157, 557, 155, 542, 175, 2);

        // benzierCurve(g2, 315, 200, 320, 180, 330, 180, 340, 200, 2);

        // back
        benzierCurve(g2, 302, 150, 320, 175, 330, 160, 336, 176, 2);
        benzierCurve(g2, 336, 176, 350, 180, 355, 175, 360, 185, 2);
        benzierCurve(g2, 360, 185, 370, 183, 380, 180, 390, 185, 2);
        benzierCurve(g2, 390, 185, 400, 183, 410, 180, 420, 185, 2);
        benzierCurve(g2, 420, 185, 422, 190, 418, 195, 405, 206, 2);
        // detail_back
        g2.setColor(Color.black);
        benzierCurve(g2, 315, 165, 314, 170, 313, 175, 302, 173, 1);
        benzierCurve(g2, 335, 170, 334, 175, 333, 180, 320, 184, 1);
        benzierCurve(g2, 353, 177, 350, 185, 345, 190, 335, 193, 1);
        benzierCurve(g2, 360, 183, 370, 185, 373, 190, 350, 200, 1);
        benzierCurve(g2, 380, 183, 390, 185, 393, 190, 373, 205, 1);
        benzierCurve(g2, 400, 183, 407, 185, 412, 190, 390, 205, 1);
        ///// color////

        floodFill(buffer, 350, 180, Color.WHITE, new Color(128, 128, 128));///// back
        floodFill(buffer, 200, 350, Color.WHITE, new Color(221, 93, 97));///// pink_bodyL
        floodFill(buffer, 400, 200, Color.WHITE, new Color(221, 93, 97));///// pink__bodyR
        floodFill(buffer, 500, 200, Color.WHITE, new Color(221, 93, 97));///// pink_Leg
        floodFill(buffer, 200, 200, Color.WHITE, new Color(221, 93, 97));///// pink_Leg
        floodFill(buffer, 145, 250, Color.WHITE, new Color(153, 0, 0));///// fin
        floodFill(buffer, 222, 320, Color.WHITE, new Color(153, 0, 0));///// fin
        floodFill(buffer, 300, 95, Color.WHITE, new Color(153, 0, 0));///// fin
        floodFill(buffer, 373, 135, Color.WHITE, new Color(153, 0, 0));///// fin
        floodFill(buffer, 410, 110, Color.WHITE, new Color(153, 0, 0));///// fin

        g2.setColor(new Color(153, 0, 0));
        benzierCurve(g2, 210, 319, 201, 322, 200, 325, 204, 332, 2);
        benzierCurve(g2, 204, 332, 201, 335, 200, 340, 204, 343, 2);
        benzierCurve(g2, 204, 343, 190, 348, 190, 355, 204, 365, 2);
        benzierCurve(g2, 203, 315, 193, 320, 190, 325, 195, 332, 2);
        benzierCurve(g2, 195, 332, 193, 335, 190, 338, 195, 340, 2);
        benzierCurve(g2, 195, 340, 185, 345, 180, 350, 185, 355, 2);
        benzierCurve(g2, 193, 332, 173, 335, 176, 345, 183, 350, 2);
        benzierCurve(g2, 178, 333, 173, 335, 160, 340, 165, 342, 2);
        benzierCurve(g2, 195, 317, 165, 320, 175, 330, 178, 333, 2);
        benzierCurve(g2, 195, 310, 190, 312, 180, 315, 195, 317, 2);
        benzierCurve(g2, 190, 305, 170, 310, 170, 315, 175, 323, 2);
        benzierCurve(g2, 175, 323, 160, 325, 165, 330, 170, 337, 2);
        benzierCurve(g2, 150, 275, 145, 277, 143, 270, 140, 285, 2);
        benzierCurve(g2, 140, 275, 133, 272, 130, 273, 125, 275, 2);
        benzierCurve(g2, 147, 265, 145, 260, 144, 255, 140, 275, 2);
        benzierCurve(g2, 125, 270, 135, 257, 133, 256, 140, 260, 2);
        benzierCurve(g2, 130, 259, 125, 257, 124, 256, 120, 255, 2);
        benzierCurve(g2, 140, 249, 135, 247, 134, 246, 130, 259, 2);
        benzierCurve(g2, 120, 259, 125, 239, 124, 240, 140, 249, 2);
        benzierCurve(g2, 123, 245, 115, 239, 114, 240, 110, 250, 2);
        benzierCurve(g2, 123, 245, 125, 229, 124, 230, 130, 232, 2);
        benzierCurve(g2, 110, 243, 115, 230, 120, 229, 125, 229, 2);





    //////////////////////////////////////////////////////////////////////////////////////////////////////

        // หู
        benzierCurve(g2, 230, 342, 244, 355, 230, 350, 248, 375, 2);
        benzierCurve(g2, 230, 342, 254, 355, 250, 350, 260, 370, 2);
        benzierCurve(g2, 230, 342, 264, 355, 260, 350, 265, 355, 2);

        // เขาซ้าย
        benzierCurve(g2, 270, 325, 273, 330, 270, 335, 280, 340, 2);
        benzierCurve(g2, 270, 325, 263, 300, 263, 310, 260, 325, 2);
        benzierCurve(g2, 235, 272, 265, 300, 230, 310, 260, 325, 2);
        benzierCurve(g2, 225, 277, 230, 265, 235, 270, 235, 272, 2);// กลาง
        benzierCurve(g2, 225, 277, 250, 310, 235, 320, 245, 325, 2);
        benzierCurve(g2, 267, 350, 260, 335, 253, 330, 245, 325, 2);// ซ้าย

        // เขาขวา
        benzierCurve(g2, 310, 341, 303, 315, 303, 320, 310, 315, 2);
        benzierCurve(g2, 310, 315, 303, 290, 303, 300, 300, 315, 2);
        benzierCurve(g2, 275, 272, 305, 300, 270, 310, 300, 315, 2);
        benzierCurve(g2, 265, 277, 270, 265, 275, 270, 275, 272, 2);// กลาง
        benzierCurve(g2, 265, 277, 290, 310, 275, 320, 285, 325, 2);
        benzierCurve(g2, 297, 340, 295, 335, 293, 330, 285, 325, 2);// ซ้าย

        // เครา
        benzierCurve(g2, 323, 443, 325, 450, 325, 450, 331, 449, 2);
        benzierCurve(g2, 323, 443, 335, 430, 338, 430, 331, 449, 2);
        benzierCurve(g2, 293, 390, 300, 385, 263, 390, 285, 397, 2);// เขี้ยว
        benzierCurve(g2, 293, 390, 290, 423, 300, 400, 278, 397, 2);// เขี้ยว
        benzierCurve(g2, 293, 390, 300, 375, 253, 375, 278, 397, 2);// เขี้ยว

        benzierCurve(g2, 293, 390, 307, 400, 309, 395, 308, 400, 2);
        benzierCurve(g2, 313, 390, 315, 405, 319, 410, 340, 407, 2);
        benzierCurve(g2, 313, 390, 295, 395, 299, 390, 302, 377, 2);
        benzierCurve(g2, 280, 373, 282, 368, 282, 372, 302, 377, 2);
        benzierCurve(g2, 273, 375, 264, 359, 260, 355, 280, 373, 2);
        benzierCurve(g2, 273, 375, 243, 359, 253, 359, 260, 378, 2);
        benzierCurve(g2, 254, 385, 225, 365, 225, 365, 260, 378, 2);
        benzierCurve(g2, 254, 385, 225, 365, 225, 365, 260, 378, 2);
        benzierCurve(g2, 254, 385, 225, 395, 225, 385, 255, 397, 2);
        benzierCurve(g2, 264, 405, 225, 405, 225, 410, 255, 397, 2);
        benzierCurve(g2, 264, 405, 245, 415, 245, 415, 278, 412, 2);
        benzierCurve(g2, 310, 435, 300, 415, 275, 410, 278, 412, 2);
        benzierCurve(g2, 310, 435, 290, 439, 299, 439, 308, 440, 2);
        benzierCurve(g2, 310, 445, 290, 445, 299, 445, 308, 440, 2);
        benzierCurve(g2, 310, 445, 285, 458, 295, 450, 313, 459, 2);
        benzierCurve(g2, 319, 463, 289, 475, 295, 475, 315, 459, 2);
        benzierCurve(g2, 319, 463, 315, 485, 295, 485, 335, 465, 2);
        benzierCurve(g2, 349, 463, 355, 485, 355, 485, 335, 465, 2);
        benzierCurve(g2, 349, 463, 365, 485, 365, 485, 355, 450, 2);
        // floodFill(buffer, 251, 390, Color.WHITE, new Color(240, 238, 238));///// fin

        benzierCurve(g2, 249, 385, 200, 385, 210, 385, 241, 375, 2);// เครานอก
        benzierCurve(g2, 244, 385, 180, 420, 200, 410, 237, 405, 2);
        benzierCurve(g2, 253, 415, 200, 430, 210, 430, 237, 405, 2);
        benzierCurve(g2, 294, 401, 319, 419, 305, 422, 324, 441, 2);
        benzierCurve(g2, 329, 409, 315, 415, 317, 415, 334, 414, 2);

        benzierCurve(g2, 329, 409, 315, 415, 317, 415, 334, 414, 2);// หนวดจมูก
        benzierCurve(g2, 353, 416, 332, 427, 325, 427, 334, 414, 2);
        benzierCurve(g2, 364, 414, 355, 427, 365, 427, 353, 416, 2);
        benzierCurve(g2, 364, 414, 379, 414, 380, 417, 378, 407, 2);
        benzierCurve(g2, 379, 396, 399, 398, 389, 398, 378, 407, 2);
        benzierCurve(g2, 369, 391, 389, 380, 379, 382, 378, 407, 2);

        benzierCurve(g2, 325, 415, 310, 435, 340, 463, 364, 446, 2);// ลูกแก้ว
        benzierCurve(g2, 364, 446, 365, 440, 375, 440, 365, 415, 2);

        // จมูก
        benzierCurve(g2, 350, 402, 340, 405, 340, 418, 356, 409, 2);
        benzierCurve(g2, 372, 404, 369, 411, 371, 411, 356, 409, 2);
        benzierCurve(g2, 368, 393, 376, 397, 376, 403, 372, 404, 2);
        benzierCurve(g2, 368, 393, 360, 392, 350, 392, 350, 402, 2);

        // หน้า
        benzierCurve(g2, 352, 396, 346, 390, 340, 392, 336, 396, 2);
        benzierCurve(g2, 340, 392, 341, 386, 335, 382, 330, 385, 2);
        benzierCurve(g2, 326, 368, 330, 376, 330, 378, 330, 385, 2);
        benzierCurve(g2, 298, 376, 310, 376, 315, 375, 312, 368, 2);
        benzierCurve(g2, 320, 368, 318, 376, 314, 375, 312, 374, 2);
        benzierCurve(g2, 328, 370, 330, 376, 332, 372, 334, 365, 2);
        benzierCurve(g2, 330, 361, 341, 355, 345, 365, 334, 367, 2);
        benzierCurve(g2, 310, 340, 328, 352, 320, 342, 330, 361, 2);
        benzierCurve(g2, 310, 340, 300, 352, 300, 335, 298, 342, 2);
        benzierCurve(g2, 280, 340, 290, 338, 294, 346, 313, 350, 2);
        benzierCurve(g2, 280, 340, 290, 338, 294, 346, 262, 352, 2);

        // หนวดซ้าย
        benzierCurve(g2, 315, 387, 285, 470, 270, 475, 215, 447, 2);
        benzierCurve(g2, 316, 397, 285, 480, 270, 475, 205, 450, 2);

        benzierCurve(g2, 188, 460, 197, 449, 195, 440, 215, 447, 2);
        benzierCurve(g2, 220, 485, 190, 475, 190, 455, 205, 450, 2);

        benzierCurve(g2, 188, 460, 189, 464, 187, 473, 204, 482, 2);

        benzierCurve(g2, 180, 477, 200, 510, 240, 500, 204, 482, 2);
        benzierCurve(g2, 180, 470, 190, 515, 240, 510, 220, 485, 2);

        // หนวดขวา

        benzierCurve(g2, 380, 400, 418, 374, 388, 352, 375, 345, 2);
        benzierCurve(g2, 390, 400, 418, 374, 398, 352, 378, 340, 2);

        benzierCurve(g2, 390, 310, 389, 315, 355, 310, 375, 345, 2);
        benzierCurve(g2, 410, 320, 399, 310, 360, 320, 378, 340, 2);

        benzierCurve(g2, 450, 320, 440, 350, 420, 305, 390, 310, 2);
        benzierCurve(g2, 450, 330, 440, 340, 420, 325, 410, 320, 2);

        benzierCurve(g2, 450, 320, 455, 310, 460, 305, 470, 310, 2);
        benzierCurve(g2, 450, 330, 455, 310, 460, 305, 470, 310, 2);
        // floodFill(buffer, 385, 390, Color.WHITE, new Color(21, 93, 97));

        // eye
        benzierCurve(g2, 340, 365, 345, 372, 340, 377, 331, 381, 2);

        benzierCurve(g2, 311, 375, 305, 379, 306, 385, 311, 387, 2);
        benzierCurve(g2, 311, 375, 330, 378, 326, 385, 311, 387, 2);

        // ขนหัว
        benzierCurve(g2, 232, 386, 230, 385, 235, 385, 243, 386, 2);
        benzierCurve(g2, 232, 386, 230, 385, 208, 350, 204, 337, 2);
        benzierCurve(g2, 235, 353, 220, 354, 216, 349, 204, 337, 2);

        benzierCurve(g2, 235, 353, 220, 340, 216, 334, 208, 324, 2);
        benzierCurve(g2, 208, 324, 220, 330, 226, 334, 255, 334, 2);
        benzierCurve(g2, 228, 332, 225, 318, 233, 311, 219, 297, 2);
        benzierCurve(g2, 219, 297, 225, 305, 260, 310, 300, 349, 2);

        benzierCurve(g2, 304, 320, 317, 322, 326, 330, 345, 330, 2);
        benzierCurve(g2, 325, 343, 330, 340, 335, 334, 345, 330, 2);
        benzierCurve(g2, 325, 343, 310, 340, 310, 334, 312, 340, 2);

    //////////////////////////////////////////////////////////////////////////////////////////////////////

        // เมฆหนวดซ้าย
        benzierCurve(g2, 199, 429, 170, 405, 170, 390, 184, 370, 2);
        benzierCurve(g2, 200, 445, 195, 430, 195, 420, 210, 415, 2);
        benzierCurve(g2, 200, 445, 220, 465, 230, 465, 243, 450, 2);
        benzierCurve(g2, 243, 450, 252, 440, 252, 430, 247, 420, 2);
        benzierCurve(g2, 250, 438, 290, 435, 280, 420, 283, 410, 2);
        // g2.setColor(new Color(240, 238, 238));
        benzierCurve(g2, 184, 370, 290, 405, 280, 400, 283, 410, 2);
        floodFill(buffer, 178, 390, Color.WHITE, new Color(186, 235, 252));

        //เมฆหนวดขวา
        benzierCurve(g2, 360, 395, 340, 355, 395, 350, 398, 378, 2);
        floodFill(buffer, 387, 378, Color.WHITE, new Color(186, 235, 252));
        benzierCurve(g2, 405, 425, 450, 425, 445, 380, 405, 378, 2);
        benzierCurve(g2, 410, 425, 410, 440, 395, 460, 368, 428, 2);
        floodFill(buffer, 400, 420, Color.WHITE, new Color(186, 235, 252));///// fin

        // // เมฆซ้าย
        // benzierCurve(g2, 141, 338, 138, 370, 105, 370, 97, 353, 2);
        // benzierCurve(g2, 70, 348, 80, 360, 85, 365, 97, 353, 2);
        // benzierCurve(g2, 70, 348, 60, 360, 10, 350, 37, 315, 2);
        // benzierCurve(g2, 33, 315, 20, 305, 20, 290, 42, 280, 2);
        // benzierCurve(g2, 42, 280, 33, 258, 55, 240, 83, 260, 2);
        // benzierCurve(g2, 89, 277, 70, 246, 135, 235, 120, 280, 2);
        // benzierCurve(g2, 143, 298, 139, 280, 130, 275, 120, 280, 2);
        // benzierCurve(g2, 143, 298, 150, 270, 195, 325, 155, 320, 2);
        // benzierCurve(g2, 142, 344, 190, 305, 105, 290, 120, 327, 2);
        // floodFill(buffer, 86, 308, Color.WHITE, new Color(186,235,252));

        // เมฆซ้อนซ้าย
        benzierCurve(g2, 47, 255, 25, 215, 65, 220, 70, 235, 2);
        benzierCurve(g2, 43, 230, 33, 200, 40, 190, 70, 200, 2);
        benzierCurve(g2, 70, 200, 80, 185, 90, 190, 96, 205, 2);
        floodFill(buffer, 65, 218, Color.WHITE, new Color(186, 235, 252));

        benzierCurve(g2, 65, 200, 55, 170, 65, 160, 88, 155, 2);
        benzierCurve(g2, 110, 147, 90, 135, 80, 160, 88, 157, 2);
        floodFill(buffer, 80, 178, Color.WHITE, new Color(186, 235, 252));


        // เมฆหลัง
        benzierCurve(g2, 137, 110, 120, 90, 125, 95, 130, 79, 2);
        benzierCurve(g2, 130, 79, 125, 65, 105, 38, 163, 35, 2);
        benzierCurve(g2, 215, 48, 230, 18, 190, 5, 163, 37, 2);
        benzierCurve(g2, 215, 50, 220, 5, 270, 10, 267, 33, 2);
        benzierCurve(g2, 293, 69, 289, 40, 290, 45, 267, 33, 2);
        benzierCurve(g2, 293, 69, 312, 75, 312, 79, 302, 97, 2);
        floodFill(buffer, 190, 40, Color.WHITE, new Color(186, 235, 252));


        // ท้อง
        benzierCurve(g2, 331, 239, 299, 220, 320, 200, 322, 190, 2);
        benzierCurve(g2, 329, 230, 330, 250, 375, 270, 360, 220, 2);
        benzierCurve(g2, 390, 233, 383, 253, 375, 253, 360, 250, 2);
        benzierCurve(g2, 390, 233, 400, 240, 410, 245, 420, 233, 2);
        benzierCurve(g2, 390, 233, 400, 240, 410, 245, 420, 233, 2);
        benzierCurve(g2, 445, 248, 430, 270, 415, 275, 400, 240, 2);
        benzierCurve(g2, 445, 248, 470, 255, 475, 225, 450, 210, 2);
        benzierCurve(g2, 480, 200, 480, 220, 470, 225, 450, 210, 2);
        benzierCurve(g2, 480, 200, 490, 200, 500, 190, 483, 175, 2);
        floodFill(buffer, 404, 230, Color.WHITE, new Color(186, 235, 252));

        g.drawImage(buffer, 0, 0, null);
        // g.drawImage(image, 15, 0, null);
        // Clouds.drawClouds(g);
        // Head.drawHead(g);

    }

    public void line(Graphics2D g, int x1, int y1, int x2, int y2) {
        double dx = x2 - x1;
        double dy = y2 - y1;
        double m = dy / dx;
        double x, y;
        int size = 2;

        if (m <= 1 && m >= 0) {
            y = Math.min(y1, y2);
            for (x = Math.min(x1, x2); x <= Math.max(x1, x2); x++) {
                y += m;
                plot(g, (int) x, (int) y, size);
            }
        } else if (m >= -1 && m < 0) {
            y = Math.max(y1, y2);
            for (x = Math.max(x1, x2); x >= Math.min(x1, x2); x--) {
                y += m;
                plot(g, (int) x, (int) y, size);
            }
        } else if (m > 1) {
            x = Math.min(x1, x2);
            for (y = Math.min(y1, y2); y <= Math.max(y1, y2); y++) {
                x += 1 / m;
                plot(g, (int) x, (int) y, size);
            }
        } else {
            x = Math.max(x1, x2);
            for (y = Math.max(y1, y2); y >= Math.min(y1, y2); y--) {
                x += 1 / m;
                plot(g, (int) x, (int) y, size);
            }
        }
    }

    public void plot(Graphics g, int x, int y, int size) {
        g.fillRect(x, y, size, size);
    }

    public void benzierCurve(Graphics g, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4, int size) {
        for (int i = 0; i <= 1000; i++) {
            double t = i / 1000.0;

            int x = (int) (Math.pow((1 - t), 3) * x1 +
                    (3 * t) * Math.pow(1 - t, 2) * x2
                    + (3 * (t * t) * (1 - t)) * x3
                    + Math.pow(t, 3) * x4);

            int y = (int) (Math.pow((1 - t), 3) * y1 +
                    (3 * t) * Math.pow(1 - t, 2) * y2
                    + (3 * (t * t) * (1 - t)) * y3
                    + Math.pow(t, 3) * y4);

            plot(g, x, y, size);
        }
    }

    public BufferedImage floodFill(BufferedImage m, int x, int y, Color targetColor, Color replacementColor) {
        Graphics2D g2 = m.createGraphics();
        Queue<Point> q = new LinkedList<>();

        if (m.getRGB(x, y) == targetColor.getRGB()) {
            g2.setColor(replacementColor);
            plot(g2, x, y, 1);
            q.add(new Point(x, y));
        }

        while (!q.isEmpty()) {
            Point p = q.poll();

            // south
            if (p.y < 600 && m.getRGB(p.x, p.y + 1) == targetColor.getRGB()) {
                g2.setColor(replacementColor);
                plot(g2, p.x, p.y + 1, 1);
                q.add(new Point(p.x, p.y + 1));
            }
            // north
            if (p.y > 0 && m.getRGB(p.x, p.y - 1) == targetColor.getRGB()) {
                g2.setColor(replacementColor);
                plot(g2, p.x, p.y - 1, 1);
                q.add(new Point(p.x, p.y - 1));
            }
            // east
            if (p.x < 600 && m.getRGB(p.x + 1, p.y) == targetColor.getRGB()) {
                g2.setColor(replacementColor);
                plot(g2, p.x + 1, p.y, 1);
                q.add(new Point(p.x + 1, p.y));
            }
            // west
            if (p.x > 0 && m.getRGB(p.x - 1, p.y) == targetColor.getRGB()) {
                g2.setColor(replacementColor);
                plot(g2, p.x - 1, p.y, 1);
                q.add(new Point(p.x - 1, p.y));
            }
        }
        return m;
    }

    private void Triangle(Graphics g, int x, int y, int size1, int size2, int size3) {
        int[] xPoints = { x, x + size1, x + size2 };
        int[] yPoints = { y, y - size3, y };
        // g.setColor(Color.BLACK);
        g.drawPolygon(xPoints, yPoints, 3);
        // g.fillPolygon(xPoints, yPoints, 3);
        // Draw the border of the triangle

    }
}// 3032126
